{"ast":null,"code":"/*!\n  * PhotoSwipe Lightbox 5.4.4 - https://photoswipe.com\n  * (c) 2024 Dmytro Semenov\n  */\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/**\r\n * @template {keyof HTMLElementTagNameMap} T\r\n * @param {string} className\r\n * @param {T} tagName\r\n * @param {Node} [appendToEl]\r\n * @returns {HTMLElementTagNameMap[T]}\r\n */\nfunction createElement(className, tagName, appendToEl) {\n  const el = document.createElement(tagName);\n  if (className) {\n    el.className = className;\n  }\n  if (appendToEl) {\n    appendToEl.appendChild(el);\n  }\n  return el;\n}\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n * @returns {string}\r\n */\n\nfunction toTransformString(x, y, scale) {\n  let propValue = `translate3d(${x}px,${y || 0}px,0)`;\n  if (scale !== undefined) {\n    propValue += ` scale3d(${scale},${scale},1)`;\n  }\n  return propValue;\n}\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\n\nfunction setWidthHeight(el, w, h) {\n  el.style.width = typeof w === 'number' ? `${w}px` : w;\n  el.style.height = typeof h === 'number' ? `${h}px` : h;\n}\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\n\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\n\nconst LOAD_STATE = {\n  IDLE: 'idle',\n  LOADING: 'loading',\n  LOADED: 'loaded',\n  ERROR: 'error'\n};\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n * @returns {boolean}\r\n */\n\nfunction specialKeyUsed(e) {\n  return 'button' in e && e.button === 1 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\n}\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} [option]\r\n * @param {string} [legacySelector]\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\n\nfunction getElementsFromOption(option, legacySelector, parent = document) {\n  /** @type {HTMLElement[]} */\n  let elements = [];\n  if (option instanceof Element) {\n    elements = [option];\n  } else if (option instanceof NodeList || Array.isArray(option)) {\n    elements = Array.from(option);\n  } else {\n    const selector = typeof option === 'string' ? option : legacySelector;\n    if (selector) {\n      elements = Array.from(parent.querySelectorAll(selector));\n    }\n  }\n  return elements;\n}\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n * @returns {boolean}\r\n */\n\nfunction isPswpClass(fn) {\n  return typeof fn === 'function' && fn.prototype && fn.prototype.goTo;\n}\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\n\nfunction isSafari() {\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\n}\n\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\n\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\n\n/** @typedef {import('../slide/content.js').default} ContentDefault */\n\n/** @typedef {import('../slide/slide.js').default} Slide */\n\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\n\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\n\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\n\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\n\n/** @typedef {{ x?: number; y?: number }} Point */\n\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide | undefined, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point | undefined, transitionDuration: number | false | undefined }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource | undefined, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\n\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource | undefined) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement | null | undefined, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thumbnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds | undefined, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thumbnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n * @prop {(preventPointerEvent: boolean, event: PointerEvent, pointerType: string) => boolean} preventPointerEvent\r\n *\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback\r\n */\n\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\nclass PhotoSwipeEvent {\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\n  constructor(type, details) {\n    this.type = type;\n    this.defaultPrevented = false;\n    if (details) {\n      Object.assign(this, details);\n    }\n  }\n  preventDefault() {\n    this.defaultPrevented = true;\n  }\n}\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\n\nclass Eventable {\n  constructor() {\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\n    this._listeners = {};\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\n\n    this._filters = {};\n    /** @type {PhotoSwipe | undefined} */\n\n    this.pswp = undefined;\n    /** @type {PhotoSwipeOptions | undefined} */\n\n    this.options = undefined;\n  }\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\n\n  addFilter(name, fn, priority = 100) {\n    var _this$_filters$name, _this$_filters$name2, _this$pswp;\n    if (!this._filters[name]) {\n      this._filters[name] = [];\n    }\n    (_this$_filters$name = this._filters[name]) === null || _this$_filters$name === void 0 || _this$_filters$name.push({\n      fn,\n      priority\n    });\n    (_this$_filters$name2 = this._filters[name]) === null || _this$_filters$name2 === void 0 || _this$_filters$name2.sort((f1, f2) => f1.priority - f2.priority);\n    (_this$pswp = this.pswp) === null || _this$pswp === void 0 || _this$pswp.addFilter(name, fn, priority);\n  }\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\n\n  removeFilter(name, fn) {\n    if (this._filters[name]) {\n      // @ts-expect-error\n      this._filters[name] = this._filters[name].filter(filter => filter.fn !== fn);\n    }\n    if (this.pswp) {\n      this.pswp.removeFilter(name, fn);\n    }\n  }\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\n\n  applyFilters(name, ...args) {\n    var _this$_filters$name3;\n    (_this$_filters$name3 = this._filters[name]) === null || _this$_filters$name3 === void 0 || _this$_filters$name3.forEach(filter => {\n      // @ts-expect-error\n      args[0] = filter.fn.apply(this, args);\n    });\n    return args[0];\n  }\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\n\n  on(name, fn) {\n    var _this$_listeners$name, _this$pswp2;\n    if (!this._listeners[name]) {\n      this._listeners[name] = [];\n    }\n    (_this$_listeners$name = this._listeners[name]) === null || _this$_listeners$name === void 0 || _this$_listeners$name.push(fn); // When binding events to lightbox,\n    // also bind events to PhotoSwipe Core,\n    // if it's open.\n\n    (_this$pswp2 = this.pswp) === null || _this$pswp2 === void 0 || _this$pswp2.on(name, fn);\n  }\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\n\n  off(name, fn) {\n    var _this$pswp3;\n    if (this._listeners[name]) {\n      // @ts-expect-error\n      this._listeners[name] = this._listeners[name].filter(listener => fn !== listener);\n    }\n    (_this$pswp3 = this.pswp) === null || _this$pswp3 === void 0 || _this$pswp3.off(name, fn);\n  }\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\n\n  dispatch(name, details) {\n    var _this$_listeners$name2;\n    if (this.pswp) {\n      return this.pswp.dispatch(name, details);\n    }\n    const event = /** @type {AugmentedEvent<T>} */\n    new PhotoSwipeEvent(name, details);\n    (_this$_listeners$name2 = this._listeners[name]) === null || _this$_listeners$name2 === void 0 || _this$_listeners$name2.forEach(listener => {\n      listener.call(this, event);\n    });\n    return event;\n  }\n}\nclass Placeholder {\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\n  constructor(imageSrc, container) {\n    // Create placeholder\n    // (stretched thumbnail or simple div behind the main image)\n\n    /** @type {HTMLImageElement | HTMLDivElement | null} */\n    this.element = createElement('pswp__img pswp__img--placeholder', imageSrc ? 'img' : 'div', container);\n    if (imageSrc) {\n      const imgEl = /** @type {HTMLImageElement} */\n      this.element;\n      imgEl.decoding = 'async';\n      imgEl.alt = '';\n      imgEl.src = imageSrc;\n      imgEl.setAttribute('role', 'presentation');\n    }\n    this.element.setAttribute('aria-hidden', 'true');\n  }\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\n\n  setDisplayedSize(width, height) {\n    if (!this.element) {\n      return;\n    }\n    if (this.element.tagName === 'IMG') {\n      // Use transform scale() to modify img placeholder size\n      // (instead of changing width/height directly).\n      // This helps with performance, specifically in iOS15 Safari.\n      setWidthHeight(this.element, 250, 'auto');\n      this.element.style.transformOrigin = '0 0';\n      this.element.style.transform = toTransformString(0, 0, width / 250);\n    } else {\n      setWidthHeight(this.element, width, height);\n    }\n  }\n  destroy() {\n    var _this$element;\n    if ((_this$element = this.element) !== null && _this$element !== void 0 && _this$element.parentNode) {\n      this.element.remove();\n    }\n    this.element = null;\n  }\n}\n\n/** @typedef {import('./slide.js').default} Slide */\n\n/** @typedef {import('./slide.js').SlideData} SlideData */\n\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\n\n/** @typedef {import('../util/util.js').LoadState} LoadState */\n\nclass Content {\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\n  constructor(itemData, instance, index) {\n    this.instance = instance;\n    this.data = itemData;\n    this.index = index;\n    /** @type {HTMLImageElement | HTMLDivElement | undefined} */\n\n    this.element = undefined;\n    /** @type {Placeholder | undefined} */\n\n    this.placeholder = undefined;\n    /** @type {Slide | undefined} */\n\n    this.slide = undefined;\n    this.displayedImageWidth = 0;\n    this.displayedImageHeight = 0;\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\n    this.isAttached = false;\n    this.hasSlide = false;\n    this.isDecoding = false;\n    /** @type {LoadState} */\n\n    this.state = LOAD_STATE.IDLE;\n    if (this.data.type) {\n      this.type = this.data.type;\n    } else if (this.data.src) {\n      this.type = 'image';\n    } else {\n      this.type = 'html';\n    }\n    this.instance.dispatch('contentInit', {\n      content: this\n    });\n  }\n  removePlaceholder() {\n    if (this.placeholder && !this.keepPlaceholder()) {\n      // With delay, as image might be loaded, but not rendered\n      setTimeout(() => {\n        if (this.placeholder) {\n          this.placeholder.destroy();\n          this.placeholder = undefined;\n        }\n      }, 1000);\n    }\n  }\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean} isLazy\r\n   * @param {boolean} [reload]\r\n   */\n\n  load(isLazy, reload) {\n    if (this.slide && this.usePlaceholder()) {\n      if (!this.placeholder) {\n        const placeholderSrc = this.instance.applyFilters('placeholderSrc',\n        // use  image-based placeholder only for the first slide,\n        // as rendering (even small stretched thumbnail) is an expensive operation\n        this.data.msrc && this.slide.isFirstSlide ? this.data.msrc : false, this);\n        this.placeholder = new Placeholder(placeholderSrc, this.slide.container);\n      } else {\n        const placeholderEl = this.placeholder.element; // Add placeholder to DOM if it was already created\n\n        if (placeholderEl && !placeholderEl.parentElement) {\n          this.slide.container.prepend(placeholderEl);\n        }\n      }\n    }\n    if (this.element && !reload) {\n      return;\n    }\n    if (this.instance.dispatch('contentLoad', {\n      content: this,\n      isLazy\n    }).defaultPrevented) {\n      return;\n    }\n    if (this.isImageContent()) {\n      this.element = createElement('pswp__img', 'img'); // Start loading only after width is defined, as sizes might depend on it.\n      // Due to Safari feature, we must define sizes before srcset.\n\n      if (this.displayedImageWidth) {\n        this.loadImage(isLazy);\n      }\n    } else {\n      this.element = createElement('pswp__content', 'div');\n      this.element.innerHTML = this.data.html || '';\n    }\n    if (reload && this.slide) {\n      this.slide.updateContentSize(true);\n    }\n  }\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\n\n  loadImage(isLazy) {\n    var _this$data$src, _this$data$alt;\n    if (!this.isImageContent() || !this.element || this.instance.dispatch('contentLoadImage', {\n      content: this,\n      isLazy\n    }).defaultPrevented) {\n      return;\n    }\n    const imageElement = /** @type HTMLImageElement */\n    this.element;\n    this.updateSrcsetSizes();\n    if (this.data.srcset) {\n      imageElement.srcset = this.data.srcset;\n    }\n    imageElement.src = (_this$data$src = this.data.src) !== null && _this$data$src !== void 0 ? _this$data$src : '';\n    imageElement.alt = (_this$data$alt = this.data.alt) !== null && _this$data$alt !== void 0 ? _this$data$alt : '';\n    this.state = LOAD_STATE.LOADING;\n    if (imageElement.complete) {\n      this.onLoaded();\n    } else {\n      imageElement.onload = () => {\n        this.onLoaded();\n      };\n      imageElement.onerror = () => {\n        this.onError();\n      };\n    }\n  }\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\n\n  setSlide(slide) {\n    this.slide = slide;\n    this.hasSlide = true;\n    this.instance = slide.pswp; // todo: do we need to unset slide?\n  }\n  /**\r\n   * Content load success handler\r\n   */\n\n  onLoaded() {\n    this.state = LOAD_STATE.LOADED;\n    if (this.slide && this.element) {\n      this.instance.dispatch('loadComplete', {\n        slide: this.slide,\n        content: this\n      }); // if content is reloaded\n\n      if (this.slide.isActive && this.slide.heavyAppended && !this.element.parentNode) {\n        this.append();\n        this.slide.updateContentSize(true);\n      }\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\n        this.removePlaceholder();\n      }\n    }\n  }\n  /**\r\n   * Content load error handler\r\n   */\n\n  onError() {\n    this.state = LOAD_STATE.ERROR;\n    if (this.slide) {\n      this.displayError();\n      this.instance.dispatch('loadComplete', {\n        slide: this.slide,\n        isError: true,\n        content: this\n      });\n      this.instance.dispatch('loadError', {\n        slide: this.slide,\n        content: this\n      });\n    }\n  }\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\n\n  isLoading() {\n    return this.instance.applyFilters('isContentLoading', this.state === LOAD_STATE.LOADING, this);\n  }\n  /**\r\n   * @returns {Boolean} If the content is in error state\r\n   */\n\n  isError() {\n    return this.state === LOAD_STATE.ERROR;\n  }\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\n\n  isImageContent() {\n    return this.type === 'image';\n  }\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\n\n  setDisplayedSize(width, height) {\n    if (!this.element) {\n      return;\n    }\n    if (this.placeholder) {\n      this.placeholder.setDisplayedSize(width, height);\n    }\n    if (this.instance.dispatch('contentResize', {\n      content: this,\n      width,\n      height\n    }).defaultPrevented) {\n      return;\n    }\n    setWidthHeight(this.element, width, height);\n    if (this.isImageContent() && !this.isError()) {\n      const isInitialSizeUpdate = !this.displayedImageWidth && width;\n      this.displayedImageWidth = width;\n      this.displayedImageHeight = height;\n      if (isInitialSizeUpdate) {\n        this.loadImage(false);\n      } else {\n        this.updateSrcsetSizes();\n      }\n      if (this.slide) {\n        this.instance.dispatch('imageSizeChange', {\n          slide: this.slide,\n          width,\n          height,\n          content: this\n        });\n      }\n    }\n  }\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\n\n  isZoomable() {\n    return this.instance.applyFilters('isContentZoomable', this.isImageContent() && this.state !== LOAD_STATE.ERROR, this);\n  }\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\n\n  updateSrcsetSizes() {\n    // Handle srcset sizes attribute.\n    //\n    // Never lower quality, if it was increased previously.\n    // Chrome does this automatically, Firefox and Safari do not,\n    // so we store largest used size in dataset.\n    if (!this.isImageContent() || !this.element || !this.data.srcset) {\n      return;\n    }\n    const image = /** @type HTMLImageElement */\n    this.element;\n    const sizesWidth = this.instance.applyFilters('srcsetSizesWidth', this.displayedImageWidth, this);\n    if (!image.dataset.largestUsedSize || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)) {\n      image.sizes = sizesWidth + 'px';\n      image.dataset.largestUsedSize = String(sizesWidth);\n    }\n  }\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\n\n  usePlaceholder() {\n    return this.instance.applyFilters('useContentPlaceholder', this.isImageContent(), this);\n  }\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\n\n  lazyLoad() {\n    if (this.instance.dispatch('contentLazyLoad', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n    this.load(true);\n  }\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\n\n  keepPlaceholder() {\n    return this.instance.applyFilters('isKeepingPlaceholder', this.isLoading(), this);\n  }\n  /**\r\n   * Destroy the content\r\n   */\n\n  destroy() {\n    this.hasSlide = false;\n    this.slide = undefined;\n    if (this.instance.dispatch('contentDestroy', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n    this.remove();\n    if (this.placeholder) {\n      this.placeholder.destroy();\n      this.placeholder = undefined;\n    }\n    if (this.isImageContent() && this.element) {\n      this.element.onload = null;\n      this.element.onerror = null;\n      this.element = undefined;\n    }\n  }\n  /**\r\n   * Display error message\r\n   */\n\n  displayError() {\n    if (this.slide) {\n      var _this$instance$option, _this$instance$option2;\n      let errorMsgEl = createElement('pswp__error-msg', 'div');\n      errorMsgEl.innerText = (_this$instance$option = (_this$instance$option2 = this.instance.options) === null || _this$instance$option2 === void 0 ? void 0 : _this$instance$option2.errorMsg) !== null && _this$instance$option !== void 0 ? _this$instance$option : '';\n      errorMsgEl = /** @type {HTMLDivElement} */\n      this.instance.applyFilters('contentErrorElement', errorMsgEl, this);\n      this.element = createElement('pswp__content pswp__error-msg-container', 'div');\n      this.element.appendChild(errorMsgEl);\n      this.slide.container.innerText = '';\n      this.slide.container.appendChild(this.element);\n      this.slide.updateContentSize(true);\n      this.removePlaceholder();\n    }\n  }\n  /**\r\n   * Append the content\r\n   */\n\n  append() {\n    if (this.isAttached || !this.element) {\n      return;\n    }\n    this.isAttached = true;\n    if (this.state === LOAD_STATE.ERROR) {\n      this.displayError();\n      return;\n    }\n    if (this.instance.dispatch('contentAppend', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n    const supportsDecode = 'decode' in this.element;\n    if (this.isImageContent()) {\n      // Use decode() on nearby slides\n      //\n      // Nearby slide images are in DOM and not hidden via display:none.\n      // However, they are placed offscreen (to the left and right side).\n      //\n      // Some browsers do not composite the image until it's actually visible,\n      // using decode() helps.\n      //\n      // You might ask \"why dont you just decode() and then append all images\",\n      // that's because I want to show image before it's fully loaded,\n      // as browser can render parts of image while it is loading.\n      // We do not do this in Safari due to partial loading bug.\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\n        this.isDecoding = true; // purposefully using finally instead of then,\n        // as if srcset sizes changes dynamically - it may cause decode error\n\n        /** @type {HTMLImageElement} */\n\n        this.element.decode().catch(() => {}).finally(() => {\n          this.isDecoding = false;\n          this.appendImage();\n        });\n      } else {\n        this.appendImage();\n      }\n    } else if (this.slide && !this.element.parentNode) {\n      this.slide.container.appendChild(this.element);\n    }\n  }\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\n\n  activate() {\n    if (this.instance.dispatch('contentActivate', {\n      content: this\n    }).defaultPrevented || !this.slide) {\n      return;\n    }\n    if (this.isImageContent() && this.isDecoding && !isSafari()) {\n      // add image to slide when it becomes active,\n      // even if it's not finished decoding\n      this.appendImage();\n    } else if (this.isError()) {\n      this.load(false, true); // try to reload\n    }\n    if (this.slide.holderElement) {\n      this.slide.holderElement.setAttribute('aria-hidden', 'false');\n    }\n  }\n  /**\r\n   * Deactivate the content\r\n   */\n\n  deactivate() {\n    this.instance.dispatch('contentDeactivate', {\n      content: this\n    });\n    if (this.slide && this.slide.holderElement) {\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n  /**\r\n   * Remove the content from DOM\r\n   */\n\n  remove() {\n    this.isAttached = false;\n    if (this.instance.dispatch('contentRemove', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n    if (this.element && this.element.parentNode) {\n      this.element.remove();\n    }\n    if (this.placeholder && this.placeholder.element) {\n      this.placeholder.element.remove();\n    }\n  }\n  /**\r\n   * Append the image content to slide container\r\n   */\n\n  appendImage() {\n    if (!this.isAttached) {\n      return;\n    }\n    if (this.instance.dispatch('contentAppendImage', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    } // ensure that element exists and is not already appended\n\n    if (this.slide && this.element && !this.element.parentNode) {\n      this.slide.container.appendChild(this.element);\n    }\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\n      this.removePlaceholder();\n    }\n  }\n}\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\n\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipeBase} pswp\r\n * @returns {Point}\r\n */\nfunction getViewportSize(options, pswp) {\n  if (options.getViewportSizeFn) {\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\n    if (newViewportSize) {\n      return newViewportSize;\n    }\n  }\n  return {\n    x: document.documentElement.clientWidth,\n    // TODO: height on mobile is very incosistent due to toolbar\n    // find a way to improve this\n    //\n    // document.documentElement.clientHeight - doesn't seem to work well\n    y: window.innerHeight\n  };\n}\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {Point} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\n\nfunction parsePaddingOption(prop, options, viewportSize, itemData, index) {\n  let paddingValue = 0;\n  if (options.paddingFn) {\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\n  } else if (options.padding) {\n    paddingValue = options.padding[prop];\n  } else {\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1); // @ts-expect-error\n\n    if (options[legacyPropName]) {\n      // @ts-expect-error\n      paddingValue = options[legacyPropName];\n    }\n  }\n  return Number(paddingValue) || 0;\n}\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {Point} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n * @returns {Point}\r\n */\n\nfunction getPanAreaSize(options, viewportSize, itemData, index) {\n  return {\n    x: viewportSize.x - parsePaddingOption('left', options, viewportSize, itemData, index) - parsePaddingOption('right', options, viewportSize, itemData, index),\n    y: viewportSize.y - parsePaddingOption('top', options, viewportSize, itemData, index) - parsePaddingOption('bottom', options, viewportSize, itemData, index)\n  };\n}\nconst MAX_IMAGE_WIDTH = 4000;\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\n\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\n\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\n\nclass ZoomLevel {\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\n  constructor(options, itemData, index, pswp) {\n    this.pswp = pswp;\n    this.options = options;\n    this.itemData = itemData;\n    this.index = index;\n    /** @type { Point | null } */\n\n    this.panAreaSize = null;\n    /** @type { Point | null } */\n\n    this.elementSize = null;\n    this.fit = 1;\n    this.fill = 1;\n    this.vFill = 1;\n    this.initial = 1;\n    this.secondary = 1;\n    this.max = 1;\n    this.min = 1;\n  }\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {Point} panAreaSize\r\n   */\n\n  update(maxWidth, maxHeight, panAreaSize) {\n    /** @type {Point} */\n    const elementSize = {\n      x: maxWidth,\n      y: maxHeight\n    };\n    this.elementSize = elementSize;\n    this.panAreaSize = panAreaSize;\n    const hRatio = panAreaSize.x / elementSize.x;\n    const vRatio = panAreaSize.y / elementSize.y;\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio); // zoom.vFill defines zoom level of the image\n    // when it has 100% of viewport vertical space (height)\n\n    this.vFill = Math.min(1, vRatio);\n    this.initial = this._getInitial();\n    this.secondary = this._getSecondary();\n    this.max = Math.max(this.initial, this.secondary, this._getMax());\n    this.min = Math.min(this.fit, this.initial, this.secondary);\n    if (this.pswp) {\n      this.pswp.dispatch('zoomLevelsUpdate', {\n        zoomLevels: this,\n        slideData: this.itemData\n      });\n    }\n  }\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   * @returns { number | undefined }\r\n   */\n\n  _parseZoomLevelOption(optionPrefix) {\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */\n    optionPrefix + 'ZoomLevel';\n    const optionValue = this.options[optionName];\n    if (!optionValue) {\n      return;\n    }\n    if (typeof optionValue === 'function') {\n      return optionValue(this);\n    }\n    if (optionValue === 'fill') {\n      return this.fill;\n    }\n    if (optionValue === 'fit') {\n      return this.fit;\n    }\n    return Number(optionValue);\n  }\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\n\n  _getSecondary() {\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\n    if (currZoomLevel) {\n      return currZoomLevel;\n    } // 3x of \"fit\" state, but not larger than original\n\n    currZoomLevel = Math.min(1, this.fit * 3);\n    if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\n    }\n    return currZoomLevel;\n  }\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\n\n  _getInitial() {\n    return this._parseZoomLevelOption('initial') || this.fit;\n  }\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\n\n  _getMax() {\n    // max zoom level is x4 from \"fit state\",\n    // used for zoom gesture and ctrl/trackpad zoom\n    return this._parseZoomLevelOption('max') || Math.max(1, this.fit * 4);\n  }\n}\n\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n * @param {number} index\r\n * @returns {Content} Image that is being decoded or false.\r\n */\n\nfunction lazyLoadData(itemData, instance, index) {\n  const content = instance.createContentFromData(itemData, index);\n  /** @type {ZoomLevel | undefined} */\n\n  let zoomLevel;\n  const {\n    options\n  } = instance; // We need to know dimensions of the image to preload it,\n  // as it might use srcset, and we need to define sizes\n\n  if (options) {\n    zoomLevel = new ZoomLevel(options, itemData, -1);\n    let viewportSize;\n    if (instance.pswp) {\n      viewportSize = instance.pswp.viewportSize;\n    } else {\n      viewportSize = getViewportSize(options, instance);\n    }\n    const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\n    zoomLevel.update(content.width, content.height, panAreaSize);\n  }\n  content.lazyLoad();\n  if (zoomLevel) {\n    content.setDisplayedSize(Math.ceil(content.width * zoomLevel.initial), Math.ceil(content.height * zoomLevel.initial));\n  }\n  return content;\n}\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default, it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n * @returns {Content | undefined}\r\n */\n\nfunction lazyLoadSlide(index, instance) {\n  const itemData = instance.getItemData(index);\n  if (instance.dispatch('lazyLoadSlide', {\n    index,\n    itemData\n  }).defaultPrevented) {\n    return;\n  }\n  return lazyLoadData(itemData, instance, index);\n}\n\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\n\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\n\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\n\nclass PhotoSwipeBase extends Eventable {\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\n  getNumItems() {\n    var _this$options;\n    let numItems = 0;\n    const dataSource = (_this$options = this.options) === null || _this$options === void 0 ? void 0 : _this$options.dataSource;\n    if (dataSource && 'length' in dataSource) {\n      // may be an array or just object with length property\n      numItems = dataSource.length;\n    } else if (dataSource && 'gallery' in dataSource) {\n      // query DOM elements\n      if (!dataSource.items) {\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\n      }\n      if (dataSource.items) {\n        numItems = dataSource.items.length;\n      }\n    } // legacy event, before filters were introduced\n\n    const event = this.dispatch('numItems', {\n      dataSource,\n      numItems\n    });\n    return this.applyFilters('numItems', event.numItems, dataSource);\n  }\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   * @returns {Content}\r\n   */\n\n  createContentFromData(slideData, index) {\n    return new Content(slideData, this, index);\n  }\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   * @returns {SlideData}\r\n   */\n\n  getItemData(index) {\n    var _this$options2;\n    const dataSource = (_this$options2 = this.options) === null || _this$options2 === void 0 ? void 0 : _this$options2.dataSource;\n    /** @type {SlideData | HTMLElement} */\n\n    let dataSourceItem = {};\n    if (Array.isArray(dataSource)) {\n      // Datasource is an array of elements\n      dataSourceItem = dataSource[index];\n    } else if (dataSource && 'gallery' in dataSource) {\n      // dataSource has gallery property,\n      // thus it was created by Lightbox, based on\n      // gallery and children options\n      // query DOM elements\n      if (!dataSource.items) {\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\n      }\n      dataSourceItem = dataSource.items[index];\n    }\n    let itemData = dataSourceItem;\n    if (itemData instanceof Element) {\n      itemData = this._domElementToItemData(itemData);\n    } // Dispatching the itemData event,\n    // it's a legacy verion before filters were introduced\n\n    const event = this.dispatch('itemData', {\n      itemData: itemData || {},\n      index\n    });\n    return this.applyFilters('itemData', event.itemData, index);\n  }\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   * @returns {HTMLElement[]}\r\n   */\n\n  _getGalleryDOMElements(galleryElement) {\n    var _this$options3, _this$options4;\n    if ((_this$options3 = this.options) !== null && _this$options3 !== void 0 && _this$options3.children || (_this$options4 = this.options) !== null && _this$options4 !== void 0 && _this$options4.childSelector) {\n      return getElementsFromOption(this.options.children, this.options.childSelector, galleryElement) || [];\n    }\n    return [galleryElement];\n  }\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   * @returns {SlideData}\r\n   */\n\n  _domElementToItemData(element) {\n    /** @type {SlideData} */\n    const itemData = {\n      element\n    };\n    const linkEl = /** @type {HTMLAnchorElement} */\n    element.tagName === 'A' ? element : element.querySelector('a');\n    if (linkEl) {\n      // src comes from data-pswp-src attribute,\n      // if it's empty link href is used\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\n      if (linkEl.dataset.pswpSrcset) {\n        itemData.srcset = linkEl.dataset.pswpSrcset;\n      }\n      itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;\n      itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0; // support legacy w & h properties\n\n      itemData.w = itemData.width;\n      itemData.h = itemData.height;\n      if (linkEl.dataset.pswpType) {\n        itemData.type = linkEl.dataset.pswpType;\n      }\n      const thumbnailEl = element.querySelector('img');\n      if (thumbnailEl) {\n        var _thumbnailEl$getAttri;\n\n        // msrc is URL to placeholder image that's displayed before large image is loaded\n        // by default it's displayed only for the first slide\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\n        itemData.alt = (_thumbnailEl$getAttri = thumbnailEl.getAttribute('alt')) !== null && _thumbnailEl$getAttri !== void 0 ? _thumbnailEl$getAttri : '';\n      }\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\n        itemData.thumbCropped = true;\n      }\n    }\n    return this.applyFilters('domItemData', itemData, element, linkEl);\n  }\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns {Content} Image that is being decoded or false.\r\n   */\n\n  lazyLoadData(itemData, index) {\n    return lazyLoadData(itemData, this, index);\n  }\n}\n\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Type<T>} Type<T>\r\n */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('../slide/content.js').default} Content */\n\n/** @typedef {import('../core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\n\n/** @typedef {import('../core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('../core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\n\n/**\r\n * PhotoSwipe Lightbox\r\n *\r\n * - If user has unsupported browser it falls back to default browser action (just opens URL)\r\n * - Binds click event to links that should open PhotoSwipe\r\n * - parses DOM strcture for PhotoSwipe (retrieves large image URLs and sizes)\r\n * - Initializes PhotoSwipe\r\n *\r\n *\r\n * Loader options use the same object as PhotoSwipe, and supports such options:\r\n *\r\n * gallery - Element | Element[] | NodeList | string selector for the gallery element\r\n * children - Element | Element[] | NodeList | string selector for the gallery children\r\n *\r\n */\n\nclass PhotoSwipeLightbox extends PhotoSwipeBase {\n  /**\r\n   * @param {PhotoSwipeOptions} [options]\r\n   */\n  constructor(options) {\n    super();\n    /** @type {PhotoSwipeOptions} */\n\n    this.options = options || {};\n    this._uid = 0;\n    this.shouldOpen = false;\n    /**\r\n     * @private\r\n     * @type {Content | undefined}\r\n     */\n\n    this._preloadedContent = undefined;\n    this.onThumbnailsClick = this.onThumbnailsClick.bind(this);\n  }\n  /**\r\n   * Initialize lightbox, should be called only once.\r\n   * It's not included in the main constructor, so you may bind events before it.\r\n   */\n\n  init() {\n    // Bind click events to each gallery\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector).forEach(galleryElement => {\n      galleryElement.addEventListener('click', this.onThumbnailsClick, false);\n    });\n  }\n  /**\r\n   * @param {MouseEvent} e\r\n   */\n\n  onThumbnailsClick(e) {\n    // Exit and allow default browser action if:\n    if (specialKeyUsed(e) // ... if clicked with a special key (ctrl/cmd...)\n    || window.pswp) {\n      // ... if PhotoSwipe is already open\n      return;\n    } // If both clientX and clientY are 0 or not defined,\n    // the event is likely triggered by keyboard,\n    // so we do not pass the initialPoint\n    //\n    // Note that some screen readers emulate the mouse position,\n    // so it's not the ideal way to detect them.\n    //\n\n    /** @type {Point | null} */\n\n    let initialPoint = {\n      x: e.clientX,\n      y: e.clientY\n    };\n    if (!initialPoint.x && !initialPoint.y) {\n      initialPoint = null;\n    }\n    let clickedIndex = this.getClickedIndex(e);\n    clickedIndex = this.applyFilters('clickedIndex', clickedIndex, e, this);\n    /** @type {DataSource} */\n\n    const dataSource = {\n      gallery: /** @type {HTMLElement} */\n      e.currentTarget\n    };\n    if (clickedIndex >= 0) {\n      e.preventDefault();\n      this.loadAndOpen(clickedIndex, dataSource, initialPoint);\n    }\n  }\n  /**\r\n   * Get index of gallery item that was clicked.\r\n   *\r\n   * @param {MouseEvent} e click event\r\n   * @returns {number}\r\n   */\n\n  getClickedIndex(e) {\n    // legacy option\n    if (this.options.getClickedIndexFn) {\n      return this.options.getClickedIndexFn.call(this, e);\n    }\n    const clickedTarget = /** @type {HTMLElement} */\n    e.target;\n    const childElements = getElementsFromOption(this.options.children, this.options.childSelector, /** @type {HTMLElement} */\n    e.currentTarget);\n    const clickedChildIndex = childElements.findIndex(child => child === clickedTarget || child.contains(clickedTarget));\n    if (clickedChildIndex !== -1) {\n      return clickedChildIndex;\n    } else if (this.options.children || this.options.childSelector) {\n      // click wasn't on a child element\n      return -1;\n    } // There is only one item (which is the gallery)\n\n    return 0;\n  }\n  /**\r\n   * Load and open PhotoSwipe\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource} [dataSource]\r\n   * @param {Point | null} [initialPoint]\r\n   * @returns {boolean}\r\n   */\n\n  loadAndOpen(index, dataSource, initialPoint) {\n    // Check if the gallery is already open\n    if (window.pswp || !this.options) {\n      return false;\n    } // Use the first gallery element if dataSource is not provided\n\n    if (!dataSource && this.options.gallery && this.options.children) {\n      const galleryElements = getElementsFromOption(this.options.gallery);\n      if (galleryElements[0]) {\n        dataSource = {\n          gallery: galleryElements[0]\n        };\n      }\n    } // set initial index\n\n    this.options.index = index; // define options for PhotoSwipe constructor\n\n    this.options.initialPointerPos = initialPoint;\n    this.shouldOpen = true;\n    this.preload(index, dataSource);\n    return true;\n  }\n  /**\r\n   * Load the main module and the slide content by index\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource} [dataSource]\r\n   */\n\n  preload(index, dataSource) {\n    const {\n      options\n    } = this;\n    if (dataSource) {\n      options.dataSource = dataSource;\n    } // Add the main module\n\n    /** @type {Promise<Type<PhotoSwipe>>[]} */\n\n    const promiseArray = [];\n    const pswpModuleType = typeof options.pswpModule;\n    if (isPswpClass(options.pswpModule)) {\n      promiseArray.push(Promise.resolve(/** @type {Type<PhotoSwipe>} */\n      options.pswpModule));\n    } else if (pswpModuleType === 'string') {\n      throw new Error('pswpModule as string is no longer supported');\n    } else if (pswpModuleType === 'function') {\n      promiseArray.push(/** @type {() => Promise<Type<PhotoSwipe>>} */\n      options.pswpModule());\n    } else {\n      throw new Error('pswpModule is not valid');\n    } // Add custom-defined promise, if any\n\n    if (typeof options.openPromise === 'function') {\n      // allow developers to perform some task before opening\n      promiseArray.push(options.openPromise());\n    }\n    if (options.preloadFirstSlide !== false && index >= 0) {\n      this._preloadedContent = lazyLoadSlide(index, this);\n    } // Wait till all promises resolve and open PhotoSwipe\n\n    const uid = ++this._uid;\n    Promise.all(promiseArray).then(iterableModules => {\n      if (this.shouldOpen) {\n        const mainModule = iterableModules[0];\n        this._openPhotoswipe(mainModule, uid);\n      }\n    });\n  }\n  /**\r\n   * @private\r\n   * @param {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} module\r\n   * @param {number} uid\r\n   */\n\n  _openPhotoswipe(module, uid) {\n    // Cancel opening if UID doesn't match the current one\n    // (if user clicked on another gallery item before current was loaded).\n    //\n    // Or if shouldOpen flag is set to false\n    // (developer may modify it via public API)\n    if (uid !== this._uid && this.shouldOpen) {\n      return;\n    }\n    this.shouldOpen = false; // PhotoSwipe is already open\n\n    if (window.pswp) {\n      return;\n    }\n    /**\r\n     * Pass data to PhotoSwipe and open init\r\n     *\r\n     * @type {PhotoSwipe}\r\n     */\n\n    const pswp = typeof module === 'object' ? new module.default(this.options) // eslint-disable-line\n    : new module(this.options); // eslint-disable-line\n\n    this.pswp = pswp;\n    window.pswp = pswp; // map listeners from Lightbox to PhotoSwipe Core\n\n    /** @type {(keyof PhotoSwipeEventsMap)[]} */\n\n    Object.keys(this._listeners).forEach(name => {\n      var _this$_listeners$name;\n      (_this$_listeners$name = this._listeners[name]) === null || _this$_listeners$name === void 0 || _this$_listeners$name.forEach(fn => {\n        pswp.on(name, /** @type {EventCallback<typeof name>} */\n        fn);\n      });\n    }); // same with filters\n\n    /** @type {(keyof PhotoSwipeFiltersMap)[]} */\n\n    Object.keys(this._filters).forEach(name => {\n      var _this$_filters$name;\n      (_this$_filters$name = this._filters[name]) === null || _this$_filters$name === void 0 || _this$_filters$name.forEach(filter => {\n        pswp.addFilter(name, filter.fn, filter.priority);\n      });\n    });\n    if (this._preloadedContent) {\n      pswp.contentLoader.addToCache(this._preloadedContent);\n      this._preloadedContent = undefined;\n    }\n    pswp.on('destroy', () => {\n      // clean up public variables\n      this.pswp = undefined;\n      delete window.pswp;\n    });\n    pswp.init();\n  }\n  /**\r\n   * Unbinds all events, closes PhotoSwipe if it's open.\r\n   */\n\n  destroy() {\n    var _this$pswp;\n    (_this$pswp = this.pswp) === null || _this$pswp === void 0 || _this$pswp.destroy();\n    this.shouldOpen = false;\n    this._listeners = {};\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector).forEach(galleryElement => {\n      galleryElement.removeEventListener('click', this.onThumbnailsClick, false);\n    });\n  }\n}\nexport { PhotoSwipeLightbox as default };","map":{"version":3,"names":["createElement","className","tagName","appendToEl","el","document","appendChild","toTransformString","x","y","scale","propValue","undefined","setWidthHeight","w","h","style","width","height","LOAD_STATE","IDLE","LOADING","LOADED","ERROR","specialKeyUsed","e","button","ctrlKey","metaKey","altKey","shiftKey","getElementsFromOption","option","legacySelector","parent","elements","Element","NodeList","Array","isArray","from","selector","querySelectorAll","isPswpClass","fn","prototype","goTo","isSafari","navigator","vendor","match","PhotoSwipeEvent","constructor","type","details","defaultPrevented","Object","assign","preventDefault","Eventable","_listeners","_filters","pswp","options","addFilter","name","priority","_this$_filters$name","_this$_filters$name2","_this$pswp","push","sort","f1","f2","removeFilter","filter","applyFilters","args","_this$_filters$name3","forEach","apply","on","_this$_listeners$name","_this$pswp2","off","_this$pswp3","listener","dispatch","_this$_listeners$name2","event","call","Placeholder","imageSrc","container","element","imgEl","decoding","alt","src","setAttribute","setDisplayedSize","transformOrigin","transform","destroy","_this$element","parentNode","remove","Content","itemData","instance","index","data","placeholder","slide","displayedImageWidth","displayedImageHeight","Number","isAttached","hasSlide","isDecoding","state","content","removePlaceholder","keepPlaceholder","setTimeout","load","isLazy","reload","usePlaceholder","placeholderSrc","msrc","isFirstSlide","placeholderEl","parentElement","prepend","isImageContent","loadImage","innerHTML","html","updateContentSize","_this$data$src","_this$data$alt","imageElement","updateSrcsetSizes","srcset","complete","onLoaded","onload","onerror","onError","setSlide","isActive","heavyAppended","append","displayError","isError","isLoading","isInitialSizeUpdate","isZoomable","image","sizesWidth","dataset","largestUsedSize","parseInt","sizes","String","lazyLoad","_this$instance$option","_this$instance$option2","errorMsgEl","innerText","errorMsg","supportsDecode","decode","catch","finally","appendImage","activate","holderElement","deactivate","getViewportSize","getViewportSizeFn","newViewportSize","documentElement","clientWidth","window","innerHeight","parsePaddingOption","prop","viewportSize","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","getPanAreaSize","MAX_IMAGE_WIDTH","ZoomLevel","panAreaSize","elementSize","fit","fill","vFill","initial","secondary","max","min","update","maxWidth","maxHeight","hRatio","vRatio","Math","_getInitial","_getSecondary","_getMax","zoomLevels","slideData","_parseZoomLevelOption","optionPrefix","optionName","optionValue","currZoomLevel","lazyLoadData","createContentFromData","zoomLevel","ceil","lazyLoadSlide","getItemData","PhotoSwipeBase","getNumItems","_this$options","numItems","dataSource","length","items","_getGalleryDOMElements","gallery","_this$options2","dataSourceItem","_domElementToItemData","galleryElement","_this$options3","_this$options4","children","childSelector","linkEl","querySelector","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","thumbnailEl","_thumbnailEl$getAttri","currentSrc","getAttribute","pswpCropped","cropped","thumbCropped","PhotoSwipeLightbox","_uid","shouldOpen","_preloadedContent","onThumbnailsClick","bind","init","gallerySelector","addEventListener","initialPoint","clientX","clientY","clickedIndex","getClickedIndex","currentTarget","loadAndOpen","getClickedIndexFn","clickedTarget","target","childElements","clickedChildIndex","findIndex","child","contains","galleryElements","initialPointerPos","preload","promiseArray","pswpModuleType","pswpModule","Promise","resolve","Error","openPromise","preloadFirstSlide","uid","all","then","iterableModules","mainModule","_openPhotoswipe","module","default","keys","contentLoader","addToCache","removeEventListener"],"sources":["/Users/forresttindall/Documents/Code Local/photography-portfolio/src/js/util/util.js","/Users/forresttindall/Documents/Code Local/photography-portfolio/src/js/core/eventable.js","/Users/forresttindall/Documents/Code Local/photography-portfolio/src/js/slide/placeholder.js","/Users/forresttindall/Documents/Code Local/photography-portfolio/src/js/slide/content.js","/Users/forresttindall/Documents/Code Local/photography-portfolio/src/js/util/viewport-size.js","/Users/forresttindall/Documents/Code Local/photography-portfolio/src/js/slide/zoom-level.js","/Users/forresttindall/Documents/Code Local/photography-portfolio/src/js/slide/loader.js","/Users/forresttindall/Documents/Code Local/photography-portfolio/src/js/core/base.js","/Users/forresttindall/Documents/Code Local/photography-portfolio/src/js/lightbox/lightbox.js"],"sourcesContent":["/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @template {keyof HTMLElementTagNameMap} T\r\n * @param {string} className\r\n * @param {T} tagName\r\n * @param {Node} [appendToEl]\r\n * @returns {HTMLElementTagNameMap[T]}\r\n */\r\nexport function createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName);\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nexport function equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nexport function roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {number}\r\n */\r\nexport function getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are equal\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {boolean}\r\n */\r\nexport function pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n * @returns {number}\r\n */\r\nexport function clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n * @returns {string}\r\n */\r\nexport function toTransformString(x, y, scale) {\r\n  let propValue = `translate3d(${x}px,${y || 0}px,0)`;\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ` scale3d(${scale},${scale},1)`;\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n */\r\nexport function setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string} [prop] CSS property to animate\r\n * @param {number} [duration] in ms\r\n * @param {string} [ease] CSS easing function\r\n */\r\nexport function setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? `${prop} ${duration}ms ${ease || defaultCSSEasing}`\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nexport function setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? `${w}px` : w;\r\n  el.style.height = (typeof h === 'number') ? `${h}px` : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nexport function removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nexport function decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode().catch(() => {});\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nexport const LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n * @returns {boolean}\r\n */\r\nexport function specialKeyUsed(e) {\r\n  return ('button' in e && e.button === 1) || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} [option]\r\n * @param {string} [legacySelector]\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nexport function getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n * @returns {boolean}\r\n */\r\nexport function isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nexport function isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\r\n\r\n","/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide | undefined, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point | undefined, transitionDuration: number | false | undefined }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource | undefined, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource | undefined) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement | null | undefined, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thumbnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds | undefined, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thumbnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n * @prop {(preventPointerEvent: boolean, event: PointerEvent, pointerType: string) => boolean} preventPointerEvent\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    this.defaultPrevented = false;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe | undefined} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions | undefined} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name]?.push({ fn, priority });\r\n    this._filters[name]?.sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    this.pswp?.addFilter(name, fn, priority);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    this._filters[name]?.forEach((filter) => {\r\n      // @ts-expect-error\r\n      args[0] = filter.fn.apply(this, args);\r\n    });\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name]?.push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    this.pswp?.on(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    this.pswp?.off(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    this._listeners[name]?.forEach((listener) => {\r\n      listener.call(this, event);\r\n    });\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nexport default Eventable;\r\n","import { createElement, setWidthHeight, toTransformString } from '../util/util.js';\r\n\r\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    /** @type {HTMLImageElement | HTMLDivElement | null} */\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : 'div',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      const imgEl = /** @type {HTMLImageElement} */ (this.element);\r\n      imgEl.decoding = 'async';\r\n      imgEl.alt = '';\r\n      imgEl.src = imageSrc;\r\n      imgEl.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hidden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element?.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\r\n\r\nexport default Placeholder;\r\n","import { createElement, isSafari, LOAD_STATE, setWidthHeight } from '../util/util.js';\r\nimport Placeholder from './placeholder.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {Placeholder | undefined} */\r\n    this.placeholder = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.slide = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    this.isDecoding = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = undefined;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean} isLazy\r\n   * @param {boolean} [reload]\r\n   */\r\n  load(isLazy, reload) {\r\n    if (this.slide && this.usePlaceholder()) {\r\n      if (!this.placeholder) {\r\n        const placeholderSrc = this.instance.applyFilters(\r\n          'placeholderSrc',\r\n          // use  image-based placeholder only for the first slide,\r\n          // as rendering (even small stretched thumbnail) is an expensive operation\r\n          (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n          this\r\n        );\r\n        this.placeholder = new Placeholder(\r\n          placeholderSrc,\r\n          this.slide.container\r\n        );\r\n      } else {\r\n        const placeholderEl = this.placeholder.element;\r\n        // Add placeholder to DOM if it was already created\r\n        if (placeholderEl && !placeholderEl.parentElement) {\r\n          this.slide.container.prepend(placeholderEl);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content', 'div');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    if (!this.isImageContent()\r\n      || !this.element\r\n      || this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src ?? '';\r\n    imageElement.alt = this.data.alt ?? '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide && this.element) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is in error state\r\n   */\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    if (this.instance.dispatch(\r\n      'contentResize',\r\n      { content: this, width, height }).defaultPrevented\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        this.instance.dispatch(\r\n          'imageSizeChange',\r\n          { slide: this.slide, width, height, content: this }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (!this.isImageContent() || !this.element || !this.data.srcset) {\r\n      return;\r\n    }\r\n\r\n    const image = /** @type HTMLImageElement */ (this.element);\r\n    const sizesWidth = this.instance.applyFilters(\r\n      'srcsetSizesWidth',\r\n      this.displayedImageWidth,\r\n      this\r\n    );\r\n\r\n    if (\r\n      !image.dataset.largestUsedSize\r\n      || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)\r\n    ) {\r\n      image.sizes = sizesWidth + 'px';\r\n      image.dataset.largestUsedSize = String(sizesWidth);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = undefined;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.destroy();\r\n      this.placeholder = undefined;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      let errorMsgEl = createElement('pswp__error-msg', 'div');\r\n      errorMsgEl.innerText = this.instance.options?.errorMsg ?? '';\r\n      errorMsgEl = /** @type {HTMLDivElement} */ (this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      ));\r\n      this.element = createElement('pswp__content pswp__error-msg-container', 'div');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached || !this.element) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().catch(() => {}).finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.slide && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented\r\n      || !this.slide) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n      // add image to slide when it becomes active,\r\n      // even if it's not finished decoding\r\n      this.appendImage();\r\n    } else if (this.isError()) {\r\n      this.load(false, true); // try to reload\r\n    }\r\n\r\n    if (this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'false');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n    if (this.slide && this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n\r\n    if (this.placeholder && this.placeholder.element) {\r\n      this.placeholder.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipeBase} pswp\r\n * @returns {Point}\r\n */\r\nexport function getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {Point} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nexport function parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  let paddingValue = 0;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return Number(paddingValue) || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {Point} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n * @returns {Point}\r\n */\r\nexport function getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n","const MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n    /** @type { Point | null } */\r\n    this.panAreaSize = null;\r\n    /** @type { Point | null } */\r\n    this.elementSize = null;\r\n    this.fit = 1;\r\n    this.fill = 1;\r\n    this.vFill = 1;\r\n    this.initial = 1;\r\n    this.secondary = 1;\r\n    this.max = 1;\r\n    this.min = 1;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {Point} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    /** @type {Point} */\r\n    const elementSize = { x: maxWidth, y: maxHeight };\r\n    this.elementSize = elementSize;\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = panAreaSize.x / elementSize.x;\r\n    const vRatio = panAreaSize.y / elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   * @returns { number | undefined }\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (\r\n      optionPrefix + 'ZoomLevel'\r\n    );\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return this._parseZoomLevelOption('max') || Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\nexport default ZoomLevel;\r\n","import { getViewportSize, getPanAreaSize } from '../util/viewport-size.js';\r\nimport ZoomLevel from './zoom-level.js';\r\n\r\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n * @param {number} index\r\n * @returns {Content} Image that is being decoded or false.\r\n */\r\nexport function lazyLoadData(itemData, instance, index) {\r\n  const content = instance.createContentFromData(itemData, index);\r\n  /** @type {ZoomLevel | undefined} */\r\n  let zoomLevel;\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset, and we need to define sizes\r\n  if (options) {\r\n    zoomLevel = new ZoomLevel(options, itemData, -1);\r\n\r\n    let viewportSize;\r\n    if (instance.pswp) {\r\n      viewportSize = instance.pswp.viewportSize;\r\n    } else {\r\n      viewportSize = getViewportSize(options, instance);\r\n    }\r\n\r\n    const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n    zoomLevel.update(content.width, content.height, panAreaSize);\r\n  }\r\n\r\n  content.lazyLoad();\r\n\r\n  if (zoomLevel) {\r\n    content.setDisplayedSize(\r\n      Math.ceil(content.width * zoomLevel.initial),\r\n      Math.ceil(content.height * zoomLevel.initial)\r\n    );\r\n  }\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default, it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n * @returns {Content | undefined}\r\n */\r\nexport function lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number} [diff] Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} initialIndex\r\n   */\r\n  loadSlideByIndex(initialIndex) {\r\n    const index = this.pswp.getLoopedIndex(initialIndex);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   * @returns {Content}\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      this.addToCache(content);\r\n    }\r\n\r\n    // assign slide to content\r\n    content.setSlide(slide);\r\n\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   * @returns {Content | undefined}\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = [];\r\n  }\r\n}\r\n\r\nexport default ContentLoader;\r\n","import Eventable from './eventable.js';\r\nimport { getElementsFromOption } from '../util/util.js';\r\nimport Content from '../slide/content.js';\r\nimport { lazyLoadData } from '../slide/loader.js';\r\n\r\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems = 0;\r\n    const dataSource = this.options?.dataSource;\r\n\r\n    if (dataSource && 'length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   * @returns {Content}\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   * @returns {SlideData}\r\n   */\r\n  getItemData(index) {\r\n    const dataSource = this.options?.dataSource;\r\n    /** @type {SlideData | HTMLElement} */\r\n    let dataSourceItem = {};\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   * @returns {HTMLElement[]}\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options?.children || this.options?.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   * @returns {SlideData}\r\n   */\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (\r\n      element.tagName === 'A'\r\n        ? element\r\n        : element.querySelector('a')\r\n    );\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;\r\n      itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0;\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt') ?? '';\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns {Content} Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeBase;\r\n","import {\r\n  specialKeyUsed,\r\n  getElementsFromOption,\r\n  isPswpClass\r\n} from '../util/util.js';\r\n\r\nimport PhotoSwipeBase from '../core/base.js';\r\nimport { lazyLoadSlide } from '../slide/loader.js';\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/content.js').default} Content */\r\n/** @typedef {import('../core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('../core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('../core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n\r\n/**\r\n * PhotoSwipe Lightbox\r\n *\r\n * - If user has unsupported browser it falls back to default browser action (just opens URL)\r\n * - Binds click event to links that should open PhotoSwipe\r\n * - parses DOM strcture for PhotoSwipe (retrieves large image URLs and sizes)\r\n * - Initializes PhotoSwipe\r\n *\r\n *\r\n * Loader options use the same object as PhotoSwipe, and supports such options:\r\n *\r\n * gallery - Element | Element[] | NodeList | string selector for the gallery element\r\n * children - Element | Element[] | NodeList | string selector for the gallery children\r\n *\r\n */\r\nclass PhotoSwipeLightbox extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} [options]\r\n   */\r\n  constructor(options) {\r\n    super();\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = options || {};\r\n    this._uid = 0;\r\n    this.shouldOpen = false;\r\n    /**\r\n     * @private\r\n     * @type {Content | undefined}\r\n     */\r\n    this._preloadedContent = undefined;\r\n\r\n    this.onThumbnailsClick = this.onThumbnailsClick.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Initialize lightbox, should be called only once.\r\n   * It's not included in the main constructor, so you may bind events before it.\r\n   */\r\n  init() {\r\n    // Bind click events to each gallery\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.addEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} e\r\n   */\r\n  onThumbnailsClick(e) {\r\n    // Exit and allow default browser action if:\r\n    if (specialKeyUsed(e) // ... if clicked with a special key (ctrl/cmd...)\r\n        || window.pswp) { // ... if PhotoSwipe is already open\r\n      return;\r\n    }\r\n\r\n    // If both clientX and clientY are 0 or not defined,\r\n    // the event is likely triggered by keyboard,\r\n    // so we do not pass the initialPoint\r\n    //\r\n    // Note that some screen readers emulate the mouse position,\r\n    // so it's not the ideal way to detect them.\r\n    //\r\n    /** @type {Point | null} */\r\n    let initialPoint = { x: e.clientX, y: e.clientY };\r\n\r\n    if (!initialPoint.x && !initialPoint.y) {\r\n      initialPoint = null;\r\n    }\r\n\r\n    let clickedIndex = this.getClickedIndex(e);\r\n    clickedIndex = this.applyFilters('clickedIndex', clickedIndex, e, this);\r\n    /** @type {DataSource} */\r\n    const dataSource = {\r\n      gallery: /** @type {HTMLElement} */ (e.currentTarget)\r\n    };\r\n\r\n    if (clickedIndex >= 0) {\r\n      e.preventDefault();\r\n      this.loadAndOpen(clickedIndex, dataSource, initialPoint);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get index of gallery item that was clicked.\r\n   *\r\n   * @param {MouseEvent} e click event\r\n   * @returns {number}\r\n   */\r\n  getClickedIndex(e) {\r\n    // legacy option\r\n    if (this.options.getClickedIndexFn) {\r\n      return this.options.getClickedIndexFn.call(this, e);\r\n    }\r\n\r\n    const clickedTarget = /** @type {HTMLElement} */ (e.target);\r\n    const childElements = getElementsFromOption(\r\n      this.options.children,\r\n      this.options.childSelector,\r\n      /** @type {HTMLElement} */ (e.currentTarget)\r\n    );\r\n    const clickedChildIndex = childElements.findIndex(\r\n      child => child === clickedTarget || child.contains(clickedTarget)\r\n    );\r\n\r\n    if (clickedChildIndex !== -1) {\r\n      return clickedChildIndex;\r\n    } else if (this.options.children || this.options.childSelector) {\r\n      // click wasn't on a child element\r\n      return -1;\r\n    }\r\n\r\n    // There is only one item (which is the gallery)\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Load and open PhotoSwipe\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource} [dataSource]\r\n   * @param {Point | null} [initialPoint]\r\n   * @returns {boolean}\r\n   */\r\n  loadAndOpen(index, dataSource, initialPoint) {\r\n    // Check if the gallery is already open\r\n    if (window.pswp || !this.options) {\r\n      return false;\r\n    }\r\n\r\n    // Use the first gallery element if dataSource is not provided\r\n    if (!dataSource && this.options.gallery && this.options.children) {\r\n      const galleryElements = getElementsFromOption(this.options.gallery);\r\n      if (galleryElements[0]) {\r\n        dataSource = {\r\n          gallery: galleryElements[0]\r\n        };\r\n      }\r\n    }\r\n\r\n    // set initial index\r\n    this.options.index = index;\r\n\r\n    // define options for PhotoSwipe constructor\r\n    this.options.initialPointerPos = initialPoint;\r\n\r\n    this.shouldOpen = true;\r\n    this.preload(index, dataSource);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Load the main module and the slide content by index\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource} [dataSource]\r\n   */\r\n  preload(index, dataSource) {\r\n    const { options } = this;\r\n\r\n    if (dataSource) {\r\n      options.dataSource = dataSource;\r\n    }\r\n\r\n    // Add the main module\r\n    /** @type {Promise<Type<PhotoSwipe>>[]} */\r\n    const promiseArray = [];\r\n\r\n    const pswpModuleType = typeof options.pswpModule;\r\n    if (isPswpClass(options.pswpModule)) {\r\n      promiseArray.push(Promise.resolve(/** @type {Type<PhotoSwipe>} */ (options.pswpModule)));\r\n    } else if (pswpModuleType === 'string') {\r\n      throw new Error('pswpModule as string is no longer supported');\r\n    } else if (pswpModuleType === 'function') {\r\n      promiseArray.push(/** @type {() => Promise<Type<PhotoSwipe>>} */ (options.pswpModule)());\r\n    } else {\r\n      throw new Error('pswpModule is not valid');\r\n    }\r\n\r\n    // Add custom-defined promise, if any\r\n    if (typeof options.openPromise === 'function') {\r\n      // allow developers to perform some task before opening\r\n      promiseArray.push(options.openPromise());\r\n    }\r\n\r\n    if (options.preloadFirstSlide !== false && index >= 0) {\r\n      this._preloadedContent = lazyLoadSlide(index, this);\r\n    }\r\n\r\n    // Wait till all promises resolve and open PhotoSwipe\r\n    const uid = ++this._uid;\r\n    Promise.all(promiseArray).then((iterableModules) => {\r\n      if (this.shouldOpen) {\r\n        const mainModule = iterableModules[0];\r\n        this._openPhotoswipe(mainModule, uid);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} module\r\n   * @param {number} uid\r\n   */\r\n  _openPhotoswipe(module, uid) {\r\n    // Cancel opening if UID doesn't match the current one\r\n    // (if user clicked on another gallery item before current was loaded).\r\n    //\r\n    // Or if shouldOpen flag is set to false\r\n    // (developer may modify it via public API)\r\n    if (uid !== this._uid && this.shouldOpen) {\r\n      return;\r\n    }\r\n\r\n    this.shouldOpen = false;\r\n\r\n    // PhotoSwipe is already open\r\n    if (window.pswp) {\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Pass data to PhotoSwipe and open init\r\n     *\r\n     * @type {PhotoSwipe}\r\n     */\r\n    const pswp = typeof module === 'object'\r\n        ? new module.default(this.options) // eslint-disable-line\r\n        : new module(this.options); // eslint-disable-line\r\n\r\n    this.pswp = pswp;\r\n    window.pswp = pswp;\r\n\r\n    // map listeners from Lightbox to PhotoSwipe Core\r\n    /** @type {(keyof PhotoSwipeEventsMap)[]} */\r\n    (Object.keys(this._listeners)).forEach((name) => {\r\n      this._listeners[name]?.forEach((fn) => {\r\n        pswp.on(name, /** @type {EventCallback<typeof name>} */(fn));\r\n      });\r\n    });\r\n\r\n    // same with filters\r\n    /** @type {(keyof PhotoSwipeFiltersMap)[]} */\r\n    (Object.keys(this._filters)).forEach((name) => {\r\n      this._filters[name]?.forEach((filter) => {\r\n        pswp.addFilter(name, filter.fn, filter.priority);\r\n      });\r\n    });\r\n\r\n    if (this._preloadedContent) {\r\n      pswp.contentLoader.addToCache(this._preloadedContent);\r\n      this._preloadedContent = undefined;\r\n    }\r\n\r\n    pswp.on('destroy', () => {\r\n      // clean up public variables\r\n      this.pswp = undefined;\r\n      delete window.pswp;\r\n    });\r\n\r\n    pswp.init();\r\n  }\r\n\r\n  /**\r\n   * Unbinds all events, closes PhotoSwipe if it's open.\r\n   */\r\n  destroy() {\r\n    this.pswp?.destroy();\r\n\r\n    this.shouldOpen = false;\r\n    this._listeners = {};\r\n\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.removeEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeLightbox;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}